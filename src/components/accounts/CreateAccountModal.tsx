//'use client';

//import React, { useState } from 'react';
//import { accountService, Account } from '@/services/accountService';

//interface CreateAccountModalProps {
//  onClose: () => void;
//  onSuccess: () => void;
//}

//type CreateAccountForm = {
//  settings: {
//    name: string;
//  };
//  owner: {
//    name: string;
//  };
//  status: Account['status'];
//}

//export default function CreateAccountModal({ onClose, onSuccess }: CreateAccountModalProps) {
//  const [formData, setFormData] = useState<CreateAccountForm>({
//    settings: {
//      name: '',
//    },
//    owner: {
//      name: '',
//    },
//    status: 'active',
//  });
//  const [loading, setLoading] = useState(false);
//  const [error, setError] = useState<string | null>(null);

//  const handleSubmit = async (e: React.FormEvent) => {
//    e.preventDefault();
//    try {
//      setLoading(true);
//      setError(null);
      
//      const accountData: Partial<Account> = {
//        settings: {
//          name: formData.settings.name,
//          _id: '' // This will be generated by the backend
//        },
//        owner: {
//          name: formData.owner.name,
//          _id: '' // This will be generated by the backend
//        },
//        status: formData.status,
//        teams: [],
//        contacts: [],
//        chatbots: [],
//        whatsAppConfig: []
//      };

//      await accountService.createAccount(accountData);
//      onSuccess();
//      onClose();
//    } catch (err: any) {
//      setError(err.response?.data?.message || 'Failed to create account');
//    } finally {
//      setLoading(false);
//    }
//  };

//  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
//    const { name, value } = e.target;
    
//    if (name.includes('.')) {
//      const [parent, child] = name.split('.');
//      setFormData((prev) => ({
//        ...prev,
//        [parent]: {
//          ...(prev[parent as keyof CreateAccountForm] as any),
//          [child]: value
//        }
//      }));
//    } else {
//      setFormData((prev) => ({
//        ...prev,
//        [name]: value
//      }));
//    }
//  };

//  return (
//    <div className="fixed inset-0 bg-gray-500 bg-opacity-75 flex items-center justify-center z-50">
//      <div className="bg-white rounded-lg p-6 w-full max-w-md relative">
//        <div className="flex justify-between items-center mb-4">
//          <h2 className="text-lg font-medium">Create Account</h2>
//          <button
//            type="button"
//            onClick={onClose}
//            className="text-gray-400 hover:text-gray-500"
//          >
//            <span className="sr-only">Close</span>
//            <svg className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
//              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
//            </svg>
//          </button>
//        </div>

//        {error && (
//          <div className="mb-4 p-2 text-sm text-red-600 bg-red-100 rounded">
//            {error}
//          </div>
//        )}

//        <form onSubmit={handleSubmit}>
//          <div className="space-y-4">
//            <div>
//              <label htmlFor="settings.name" className="block text-sm font-medium text-gray-700">
//                Account Name
//              </label>
//              <input
//                type="text"
//                name="settings.name"
//                id="settings.name"
//                value={formData.settings.name}
//                onChange={handleChange}
//                className="mt-1 block w-full rounded-md border border-gray-300 py-2 px-3 shadow-sm focus:border-blue-500 focus:outline-none focus:ring-blue-500 sm:text-sm"
//                required
//              />
//            </div>

//            <div>
//              <label htmlFor="owner.name" className="block text-sm font-medium text-gray-700">
//                Owner Name
//              </label>
//              <input
//                type="text"
//                name="owner.name"
//                id="owner.name"
//                value={formData.owner.name}
//                onChange={handleChange}
//                className="mt-1 block w-full rounded-md border border-gray-300 py-2 px-3 shadow-sm focus:border-blue-500 focus:outline-none focus:ring-blue-500 sm:text-sm"
//                required
//              />
//            </div>

//            <div>
//              <label htmlFor="status" className="block text-sm font-medium text-gray-700">
//                Status
//              </label>
//              <select
//                name="status"
//                id="status"
//                value={formData.status}
//                onChange={handleChange}
//                className="mt-1 block w-full rounded-md border border-gray-300 py-2 px-3 shadow-sm focus:border-blue-500 focus:outline-none focus:ring-blue-500 sm:text-sm"
//              >
//                <option value="active">Active</option>
//                <option value="inactive">Inactive</option>
//                <option value="suspended">Suspended</option>
//              </select>
//            </div>
//          </div>

//          <div className="mt-6 flex justify-end space-x-3">
//            <button
//              type="button"
//              onClick={onClose}
//              className="rounded-md border border-gray-300 bg-white py-2 px-4 text-sm font-medium text-gray-700 shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
//            >
//              Cancel
//            </button>
//            <button
//              type="submit"
//              disabled={loading}
//              className="rounded-md bg-blue-600 py-2 px-4 text-sm font-medium text-white shadow-sm hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50"
//            >
//              {loading ? 'Creating...' : 'Create'}
//            </button>
//          </div>
//        </form>
//      </div>
//    </div>
//  );
//}
///////////////////////////////////////////

//CreateAccountModal.tsx

'use client';

import React, { useState } from 'react';
import adminPortalData from '../DummyData/dummyUsers';
import { accountService } from '@/services/accountService';

interface CreateAccountModalProps {
  onClose: () => void;
  onSuccess: () => void;
}

type CreateAccountForm = {
  accountName: string;
  owner: string;
  status: 'active' | 'inactive' | 'suspended';
}

export default function CreateAccountModal({ onClose, onSuccess }: CreateAccountModalProps) {
  const [formData, setFormData] = useState<CreateAccountForm>({
    accountName: '',
    owner: '',
    status: 'active',
  });
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      setLoading(true);
      setError(null);

      // When you have the API enabled:
      // await accountService.createAccount(formData);

      
      //const newAccount: AdminPortalData = {
      //accountID: 999, // replace later with a calculation for a new unique id
      //accountName: formData.accountName,
      //owner: formData.owner,
      //status: formData.status,
      //createdUTC: new Date().toLocaleDateString(),
      //};

      //adminPortalData.push(newAccount); // push it to the original array

      onSuccess();
      onClose();
    } catch (err: any) {
      setError(err.response?.data?.message || 'Failed to create account');
    } finally {
      setLoading(false);
    }
  };

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    setFormData((prev) => ({
      ...prev,
      [name]: value
    }));
  };

  return (
    <div className="fixed inset-0 bg-gray-500 bg-opacity-75 flex items-center justify-center z-50">
      <div className="bg-white rounded-lg p-6 w-full max-w-md relative">
        <div className="flex justify-between items-center mb-4">
          <h2 className="text-lg font-medium">Create Account</h2>
          <button
            type="button"
            onClick={onClose}
            className="text-gray-400 hover:text-gray-500"
          >
            <span className="sr-only">Close</span>
            <svg className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>

        {error && (
          <div className="mb-4 p-2 text-sm text-red-600 bg-red-100 rounded">
            {error}
          </div>
        )}

        <form onSubmit={handleSubmit}>
          <div className="space-y-4">
            <div>
              <label htmlFor="accountName" className="block text-sm font-medium text-gray-700">
                Account Name
              </label>
              <input
                type="text"
                name="accountName"
                id="accountName"
                value={formData.accountName}
                onChange={handleChange}
                className="mt-1 block w-full rounded-md border border-gray-300 py-2 px-3 shadow-sm focus:border-blue-500 focus:outline-none focus:ring-blue-500 sm:text-sm"
                required
              />
            </div>

            <div>
              <label htmlFor="owner" className="block text-sm font-medium text-gray-700">
                Owner Name
              </label>
              <input
                type="text"
                name="owner"
                id="owner"
                value={formData.owner}
                onChange={handleChange}
                className="mt-1 block w-full rounded-md border border-gray-300 py-2 px-3 shadow-sm focus:border-blue-500 focus:outline-none focus:ring-blue-500 sm:text-sm"
                required
              />
            </div>

            <div>
              <label htmlFor="status" className="block text-sm font-medium text-gray-700">
                Status
              </label>
              <select
                name="status"
                id="status"
                value={formData.status}
                onChange={handleChange}
                className="mt-1 block w-full rounded-md border border-gray-300 py-2 px-3 shadow-sm focus:border-blue-500 focus:outline-none focus:ring-blue-500 sm:text-sm"
              >
                <option value="active">Active</option>
                <option value="inactive">Inactive</option>
                <option value="suspended">Suspended</option>
              </select>
            </div>
          </div>

          <div className="mt-6 flex justify-end space-x-3">
            <button
              type="button"
              onClick={onClose}
              className="rounded-md border border-gray-300 bg-white py-2 px-4 text-sm font-medium text-gray-700 shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
            >
              Cancel
            </button>
            <button
              type="submit"
              disabled={loading}
              className="rounded-md bg-blue-600 py-2 px-4 text-sm font-medium text-white shadow-sm hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50"
            >
              {loading ? 'Creating...' : 'Create'}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
}